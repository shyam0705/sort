{"version":3,"sources":["logo.svg","components/algorithms/bubbleSort.js","components/helper/speech.js","components/helper/algoInfo.js","components/helper/bubbleDesc.js","components/helper/bars.js","components/helper/displayText.js","components/helper/container.js","components/helper/ControlPannel.js","components/BubbleMainComponent.js","components/helper/selectionDesc.js","components/SelectionMainComponent.js","components/HeaderComponent.js","components/InsertionMainComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","say","text","tts","window","speechSynthesis","utter","SpeechSynthesisUtterance","speak","AlgoInfo","algoInfo","className","title","description","worstCase","avgCase","bestCase","space","BubbleSortDesc","href","target","rel","Bars","styled","div","props","width","height","sorted","comparing","active","Display","comparingText","swapText","currentMin","Jumbotron","style","margin","marginTop","Container","ControlPannel","display","justifyContent","alignContent","alignItems","marginBottom","ButtonGroup","Button","color","onClick","play","onPause","onPlay","class","aria-hidden","repeat","voiceControl","voice","BubbleMain","setState","state","resetState","currentIndex","comparingIndex","a","arr","n","length","i","j","timer","tmp","randomArray","Array","from","Math","floor","random","console","log","this","ms","Promise","res","setTimeout","list","map","size","key","Component","SelectionSortDesc","SelectionMain","minIndex","swapIndex","min","comparingtext","swap","Header","useState","isOpen","setIsOpen","Navbar","dark","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","InsertionMain","selectionSort","current","Main","path","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f483c31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function timer(ms) {\r\n    return new Promise(res => setTimeout(res, ms));\r\n}\r\nexport const bubble =async  (arr, setIndex) => {\r\n    console.log(\"orignal arr is\", arr);\r\n    const n = arr.length;\r\n    for (var i = 0; i < n - 1; i++) {\r\n        setIndex(i);\r\n        timer(3000);\r\n   \r\n       // for (var j = 0 ; j < n - i-1; j++) {\r\n          //  if (arr[j] >= arr[j + 1]) {\r\n            //    var tmp = arr[j];\r\n            //    arr[j] = arr[j + 1];\r\n             //   arr[j + 1] = tmp;\r\n            //}\r\n       // }\r\n    }\r\n\r\n    console.log(\"sorted arr is\", arr);\r\n    return arr;\r\n}\r\n","export const say = (text) => {\r\n    var tts = window.speechSynthesis;\r\n    var utter = new SpeechSynthesisUtterance(text);\r\n    tts.speak(utter);\r\n}\r\n\r\n","import React from 'react';\r\nimport './style.css';\r\nfunction AlgoInfo({algoInfo}) {\r\n\treturn (\r\n        <div className=\"SortInfo\">\r\n            <hr />\r\n            <h1>{algoInfo.title ? algoInfo.title : 'Select Algorithm'}</h1>\r\n\r\n            <div className=\"SortInfo__Body\">\r\n                <article className=\"SortInfo__Article\">\r\n                    {algoInfo.description ? (\r\n                        algoInfo.description\r\n                    ) : (\r\n                            <p>\r\n                                You must select an algorithm before you can visualize it's\r\n                                execution on an array of numbers.\r\n                            </p>\r\n                        )}\r\n                </article>\r\n\r\n                <aside className=\"SortInfo__Aside\">\r\n                    <h3>Performance</h3>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>Worst-case time complexity</td>\r\n                                <td>\r\n                                    <code>{algoInfo.worstCase}</code>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>Average time complexity</td>\r\n                                <td>\r\n                                    <code>{algoInfo.avgCase}</code>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>Best-case time complexity</td>\r\n                                <td>\r\n                                    <code>{algoInfo.bestCase}</code>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>Worst-case space complexity</td>\r\n                                <td>\r\n                                    <code>{algoInfo.space}</code>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </aside>\r\n            </div>\r\n        </div>\r\n\t\t)\r\n}\r\nexport default AlgoInfo;","import React from 'react';\r\nexport const BubbleSortDesc = {\r\n    title: 'Bubble Sort',\r\n    description: (\r\n        <p>\r\n            <a\r\n                href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                Bubble Sort\r\n      </a>{' '}\r\n      is a simple sorting algorithm that repeatedly steps through the\r\n      list, compares adjacent elements and swaps them if they are in the\r\n      wrong order.The pass through the list is repeated until the list\r\n      is sorted. The algorithm, which is a comparison sort, is named for\r\n      the way smaller or larger elements \"bubble\" to the top of the\r\n      list. Although the algorithm is simple, it is too slow and\r\n      impractical for most problems\r\n        </p>\r\n    ),\r\n    worstCase: (\r\n        <span>\r\n            O(n<sup>2</sup>)\r\n        </span>\r\n    ),\r\n    avgCase: (\r\n        <span>\r\n            O(n<sup>2</sup>)\r\n        </span>\r\n    ),\r\n    bestCase: <span>O(n)</span>,\r\n    space: <span>O(1)</span>\r\n};","import styled, { css } from 'styled-components';\r\nexport const Bars =\r\n    styled.div`\r\n        display:flex;\r\n        width:${(props) => props.width};\r\n        height:${(props) => props.height};\r\n        background: ${(props) => {\r\n        if (props.sorted) {\r\n            return \"green\";\r\n        }\r\n        if (props.comparing || props.active) {\r\n            return \"red\";\r\n        }\r\n        else {\r\n            return \"grey\";\r\n        }\r\n        }};\r\n        margin-right:2px;\r\n        align-items:center;\r\n        align-content:center;\r\n        justify-content:center;\r\n        text-align:center;\r\n        color:white;\r\n\r\n`;","import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\nfunction Display({ comparingText, swapText,currentMin}) {\r\n    return (\r\n        <Jumbotron style={{ height: \"500px\", margin: \"auto\", marginTop: \"10px\"}}>\r\n            <div className=\"container\">\r\n                <div className=\"row row-header\">\r\n                    <div className=\"col-md-12\">\r\n                        <h1>Algorithm</h1>\r\n                        <hr></hr>\r\n                        <p>{comparingText}</p>\r\n                        <p>{swapText}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Jumbotron>\r\n        )\r\n}\r\nexport default Display;","import styled, { css } from 'styled-components';\r\nexport const Container = styled.div`\r\n            \r\n            \r\n            display:flex;\r\n            flex-direction:row;\r\n            align-items: flex-end;\r\n            justify-content:center;\r\n`;","import React from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nfunction ControlPannel(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\" style={{ display: \"flex\", justifyContent: \"center\", alignContent: \"center\", alignItems: \"center\", marginTop: \"10px\", marginBottom: \"20px\" }}>\r\n                <ButtonGroup>\r\n                    <Button color=\"black\" className=\"btn btn-info\" onClick={() => !props.play ? props.onPlay() : props.onPause()}>\r\n                        {\r\n                            !props.play ? <span class=\"fa fa-play\" aria-hidden=\"true\">play</span> :\r\n                                <span class=\"fa fa-pause\" aria-hidden=\"true\">pause</span>\r\n                        }\r\n                    </Button>\r\n                    <Button color=\"black\" className=\"btn btn-info\" onClick={() => props.repeat()}>\r\n                        <span class=\"fa fa-repeat\">repeat</span>\r\n                    </Button>\r\n                    <Button color=\"black\" className=\"btn btn-info\" onClick={() => props.voiceControl()}>\r\n                        {\r\n                            props.voice ? <span class=\"fa fa-microphone\">desc on</span> :\r\n                                <span class=\"fa fa-microphone-slash\">desc off</span>\r\n                        }\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\nexport default ControlPannel;","import React from 'react';\r\nimport { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { bubble } from './algorithms/bubbleSort.js';\r\nimport { Button, Row, ButtonGroup } from 'reactstrap';\r\nimport { say } from './helper/speech.js';\r\nimport AlgoInfo from './helper/algoInfo.js';\r\nimport { BubbleSortDesc } from './helper/bubbleDesc.js';\r\nimport { Bars } from './helper/bars.js';\r\nimport Display from './helper/displayText.js';\r\nimport { Container } from './helper/container.js';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport ControlPannel from './helper/ControlPannel.js';\r\nclass BubbleMain extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr: [],\r\n            currentIndex: null,\r\n            comparingIndex: null,\r\n            comparingText: \"\",\r\n            swapText: \"\",\r\n            sorted: 100,\r\n            play: false,\r\n            voice:false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        var randomArray = Array.from({ length: 6 }, () => Math.floor(Math.random() * 500));\r\n        console.log(randomArray);\r\n        this.setState({ arr: randomArray }, () => {\r\n            console.log(this.state.arr);\r\n        })     \r\n    }\r\n    timer(ms) {\r\n    return new Promise(res => setTimeout(res, ms));\r\n    }\r\n    voiceControl = () => {\r\n        this.setState({ voice: !this.state.voice });\r\n    }\r\n    resetState = () => {\r\n        this.setState({ currentIndex: null });\r\n        this.setState({ comparingIndex: null});\r\n        this.setState({ sorted: 100});\r\n        this.setState({ comparingText:\"\"});\r\n        this.setState({ swapText: \"\" });\r\n    }\r\n    repeat = () => {\r\n        this.resetState();\r\n        this.onPlay();\r\n    }\r\n    onPlay = async () => {\r\n        this.setState({play:!this.state.play})\r\n        const arr = this.state.arr;\r\n        const n = this.state.arr.length;\r\n        let speak = (text)=>say(text);\r\n        for (var i = 0; i < n - 1; i++) {\r\n\r\n           \r\n            for (var j = 0; j < n - i - 1; j++) {\r\n                this.setState({ currentIndex: j })\r\n                this.setState({ comparingIndex: j + 1 })\r\n                if (this.state.voice) { speak(`comparing  ${arr[j]} and ${arr[j + 1]}`) };\r\n                this.setState({ comparingText: `comparing  ${arr[j]} and ${arr[j + 1]}` })\r\n                this.state.voice ? await this.timer(6000) :await this.timer(1000);  \r\n                if (arr[j] >= arr[j + 1]) {\r\n                    if (this.state.voice) { speak(`${arr[j]} is greater than ${arr[j + 1]} we will swap it}`) };\r\n                    this.setState({ swapText: `${arr[j]} is greater than ${arr[j + 1]} we will swap it}` });\r\n                    this.state.voice ?await this.timer(6000) : await this.timer(1000);    \r\n                    var tmp = arr[j];\r\n                    arr[j] = arr[j + 1];\r\n                    arr[j + 1] = tmp;\r\n                    this.setState({ arr: arr })\r\n                }\r\n                this.setState({ comparingText: \"\" });\r\n                this.setState({ swapText: \"\" });\r\n                await this.timer(1000);  \r\n            }\r\n            this.setState({ comparingIndex: null });\r\n            this.setState({ currentIndex: null });\r\n            this.setState({ sorted: n - i - 1 });\r\n            await this.timer(1000);\r\n        }\r\n        this.setState({ sorted: 0 });\r\n    }\r\n    onPause = async () => {\r\n        \r\n    }\r\n  \r\n    render() {\r\n        \r\n        \r\n        const list =\r\n            this.state.arr.map((size, i) => {\r\n                return (\r\n                    <Bars height={`${size}px`} width={`${75 / this.state.arr.length}%`} active={this.state.currentIndex === i} comparing={this.state.comparingIndex === i} key={i} sorted={i >= this.state.sorted}>\r\n                        <p>{size}</p>\r\n                    </Bars>\r\n                );\r\n            });\r\n       \r\n        return (\r\n            \r\n            <div className=\"container\">\r\n                <ControlPannel play={this.state.play} voice={this.state.voice} onPlay={() => this.onPlay()} onPause={() => this.onPause()} repeat={() => this.repeat()} voiceControl={() => this.voiceControl()} />\r\n                <div className=\"row\">\r\n                    <Container className=\"col-md-8 col-sm-12\">\r\n                        {list}\r\n                    </Container>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <Display comparingText={this.state.comparingText} swapText={this.state.swapText} />\r\n                    </div>\r\n                </div>\r\n            <AlgoInfo algoInfo={BubbleSortDesc} />\r\n            </div>\r\n\r\n            );\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default BubbleMain;","import React from 'react';\r\nexport  const SelectionSortDesc = {\r\n    title: 'Selection Sort',\r\n    description: (\r\n        <p>\r\n            <a\r\n                href=\"https://en.wikipedia.org/wiki/Selection_sort\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                Selection Sort\r\n      </a>{' '}\r\n      is an in-place comparison sorting algorithm that divides the input\r\n      list into two parts: the sublist of items already sorted, which is\r\n      built up from left to right at the front (left) of the list, and\r\n      the sublist of items remaining to be sorted that occupy the rest\r\n      of the list. Initially, the sorted sublist is empty and the\r\n      unsorted sublist is the entire input list. The algorithm proceeds\r\n      by finding the smallest element in the unsorted sublist,\r\n      exchanging (swapping) it with the leftmost unsorted element\r\n      (putting it in sorted order), and moving the sublist boundaries\r\n      one element to the right.\r\n        </p>\r\n    ),\r\n    worstCase: (\r\n        <span>\r\n            O(n<sup>2</sup>)\r\n        </span>\r\n    ),\r\n    avgCase: (\r\n        <span>\r\n            O(n<sup>2</sup>)\r\n        </span>\r\n    ),\r\n    bestCase: (\r\n        <span>\r\n            O(n<sup>2</sup>)\r\n        </span>\r\n    ),\r\n    space: <span>O(1)</span>\r\n};","import React, { Component } from 'react';\r\nimport { Container } from './helper/container.js';\r\nimport styled, { css } from 'styled-components';\r\nimport { Button, Jumbotron } from 'reactstrap';\r\nimport { say } from './helper/speech.js';\r\nimport AlgoInfo from './helper/algoInfo.js';\r\nimport { SelectionSortDesc } from './helper/selectionDesc.js';\r\nimport ControlPannel from './helper/ControlPannel.js';\r\nfunction Display({ comparingText, swapText, currentMin }) {\r\n    return (\r\n        <Jumbotron style={{ height: \"500px\", margin: \"auto\", marginTop: \"10px\"}}>\r\n            <div className=\"container\">\r\n                <div className=\"row row-header\">\r\n                    <div className=\"col-12 col-sm-6\">\r\n                        <h1>Algorithm</h1>\r\n                        <hr></hr>\r\n                        <p>{comparingText}</p>\r\n                        <p>{swapText}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Jumbotron>\r\n    )\r\n}\r\nclass SelectionMain extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr:[],\r\n            minIndex: null,\r\n            comparingIndex: null,\r\n            swapIndex: null,\r\n            sorted: null,\r\n            comparingText: \"\",\r\n            swapText: \"\",\r\n            play: false,\r\n            voice:false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        var randomArray = Array.from({ length: 6 }, () => Math.floor(Math.random() * 500));\r\n        console.log(randomArray);\r\n        this.setState({ arr: randomArray }, () => {\r\n            console.log(this.state.arr);\r\n        })\r\n    }\r\n    voiceControl = () => {\r\n        this.setState({ voice: !this.state.voice });\r\n    }\r\n    resetState = () => {\r\n        this.setState({ minIndex: null});\r\n        this.setState({ comparingIndex: null});\r\n        this.setState({ swapIndex: null});\r\n        this.setState({ sorted: null});\r\n        this.setState({ comparingText: \"\"});\r\n        this.setState({ swapText: \"\"});\r\n    }\r\n    repeat = () => {\r\n        this.resetState();\r\n        this.onPlay();\r\n    }\r\n    timer(ms) {\r\n        return new Promise(res => setTimeout(res, ms));\r\n    }\r\n    onPlay = async () => {\r\n        let speak = (text) => say(text);\r\n        const arr = this.state.arr;\r\n        const n = arr.length;\r\n        for (var i = 0; i < n - 1; i++) {\r\n            await this.timer(1000);\r\n            this.setState({ minIndex: i });\r\n            if (this.state.voice) { speak(`setting ${arr[i]} as current min element,we will compare it with remaining element`) };\r\n            this.state.voice?await this.timer(6000):await this.timer(1000);\r\n            var min = i;\r\n            for (var j = i + 1; j < n; j++) {\r\n                this.setState({ comparingIndex: j });\r\n                this.setState({ comparingText:`comparing ${arr[j]} with ${arr[min]}`})\r\n                await this.timer(1000);\r\n                if (arr[j] < arr[min]) {\r\n                    \r\n                    this.setState({ swapText: `${arr[j]} is smaller than current min so we will update current min to ${arr[j]}` })\r\n                    if (this.state.voice) { speak(`${arr[j]} smaller than current min so we will update current min`) };\r\n                    this.setState({ minIndex: j });\r\n                   this.state.voice?await this.timer(5000):await this.timer(1000);\r\n                    min = j;\r\n                }\r\n                this.setState({ comparingText: \"\" });\r\n                this.setState({ swapText: \"\" });\r\n            }\r\n            this.setState({ comparingIndex: null });\r\n            this.setState({ comparingText: \"\" });\r\n            this.setState({ swapText: \"\" });\r\n            if (min != i) {\r\n                this.setState({ swapIndex: i });\r\n               await this.timer(1000);\r\n                var tmp = arr[min];\r\n                arr[min] = arr[i];\r\n                arr[i] = tmp;\r\n                this.setState({ arr: arr });\r\n                this.timer(1000);\r\n            }\r\n            this.setState({ swapIndex: null });\r\n            this.setState({ minIndex: null });\r\n            this.setState({ sorted: i + 1 });\r\n            this.timer(1000);\r\n        }\r\n        this.setState({ sorted: i + 1 });\r\n        this.setState({ minIndex: null });\r\n        this.setState({ comparingtext: \"List is sorted\" });\r\n    }\r\n    onPause = async () => {\r\n\r\n    }\r\n    render() {\r\n        const Bars = styled.div`\r\n        display:flex;\r\n        width:${(props) => props.width};\r\n        height:${(props) => props.height};\r\n        background: ${(props) => {\r\n                if (props.sorted) {\r\n                    return \"green\";\r\n                }\r\n                else {\r\n                    if (props.active || props.swap) {\r\n                        return \"red\";\r\n                    }\r\n                    else if (props.comparing) {\r\n                        return \"blue\";\r\n                    }\r\n                    else {\r\n                        return \"grey\";\r\n                    }\r\n                }\r\n            }};\r\n        margin-right:2px;\r\n        align-items:center;\r\n        align-content:center;\r\n        justify-content:center;       \r\n        text-align:center;\r\n        color:white;\r\n\r\n`;\r\n        const list = this.state.arr.map((size, i) => {\r\n            return (\r\n                <Bars height={`${size}px`} width={`${75 / this.state.arr.length}%`} active={this.state.minIndex === i} swap={this.state.swapIndex === i} comparing={this.state.comparingIndex === i} sorted={this.state.sorted>i} key={i}>\r\n                    <p>{size}</p>\r\n                </Bars>\r\n            );\r\n        }); \r\n        return (\r\n            <div className=\"container\">\r\n                <ControlPannel play={this.state.play} voice={this.state.voice} onPlay={() => this.onPlay()} onPause={() => this.onPause()} repeat={() => this.repeat()} voiceControl={() => this.voiceControl()} />\r\n                <div className=\"row\">\r\n                    <Container className=\"col-md-8 col-sm-12\">\r\n                        {list}\r\n                    </Container>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <Display comparingText={this.state.comparingText} swapText={this.state.swapText} currentMin={this.state.arr[this.state.minIndex]} />\r\n                    </div>\r\n                </div>\r\n                <AlgoInfo algoInfo={SelectionSortDesc} />\r\n            </div>\r\n\r\n            )\r\n    }\r\n}\r\nexport default SelectionMain;","import React, { useState } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n} from 'reactstrap';\r\n\r\nconst Header = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n                <NavbarBrand href=\"/\"> Select Sorting Algorithm</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink href=\"/sort/#/bubblesort\">Bubble Sort</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/sort/#/selectionsort\">Selection Sort</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/sort/#/insertionsort\">Insertion Sort</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\nimport { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Container } from './helper/container.js';\r\nimport styled, { css } from 'styled-components';\r\nimport AlgoInfo from './helper/algoInfo.js';\r\nimport { InsertionSortDesc } from './helper/insertionDesc.js';\r\nclass InsertionMain extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr: [],\r\n            currentIndex: null,\r\n            comparingIndex: null,\r\n            sorted: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        var randomArray = Array.from({ length: 6 }, () => Math.floor(Math.random() * 300));\r\n        console.log(randomArray);\r\n        this.setState({ arr: randomArray }, () => {\r\n            console.log(this.state.arr);\r\n        })\r\n    }\r\n    timer(ms) {\r\n        return new Promise(res => setTimeout(res, ms));\r\n    }\r\n    selectionSort = async () => {\r\n        const n = this.state.arr.length;\r\n        const arr = this.state.arr;\r\n        this.setState({ sorted: 1 });\r\n        await this.timer(200);\r\n        for (var i = 1; i < n; i++) {\r\n\r\n            this.setState({ currentIndex: i});\r\n            await this.timer(1000);\r\n            this.setState({ comparingIndex: i - 1 });\r\n            await this.timer(1000);\r\n            let current = arr[i];\r\n            var j = i - 1;\r\n            while (j > -1 && current < arr[j]) {\r\n                this.setState({ comparingIndex: j });\r\n                await this.timer(1000);\r\n                var tmp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = tmp;\r\n                var tmp = this.state.comparingIndex;\r\n                this.setState({ arr: arr });\r\n                this.setState({ comparingIndex: this.state.currentIndex });\r\n                this.setState({ currentIndex: tmp });\r\n                await this.timer(1000);\r\n                j--;\r\n            }\r\n            this.setState({ comparingIndex: j });\r\n            await this.timer(1000);\r\n            arr[j + 1] = current;\r\n            this.setState({ arr: arr });\r\n            this.setState({currentIndex: null});\r\n            this.setState({ comparingIndex: null })\r\n            this.setState({ sorted: i+1 });\r\n            await this.timer(1000);\r\n        }\r\n        this.setState({ sorted: n });\r\n        this.setState({ currentIndex: null });\r\n        this.setState({ comparingIndex: null });\r\n \r\n    }\r\n    render() {\r\n        const Bars = styled.div`\r\n        display:flex;\r\n        width:${(props) => props.width};\r\n        height:${(props) => props.height};\r\n        background: ${(props) => {\r\n           \r\n                \r\n                    if (props.active || props.swap) {\r\n                        return \"red\";\r\n                    }\r\n                    else if (props.comparing) {\r\n                        return \"blue\";\r\n                    }\r\n                    else if (props.sorted) {\r\n                        return \"green\";\r\n                    }\r\n                    else {\r\n                        return \"grey\";\r\n                    }\r\n           \r\n            }};\r\n        margin-right:2px;\r\n        align-content:center;\r\n        justify-content:center;\r\n        align-items:center;\r\n        text-align:center;\r\n        transform:translateY(${(props) => {\r\n            if (props.active) {\r\n                return 120\r\n            }\r\n            else {\r\n                return 0\r\n            }\r\n            }}%);\r\n        color:white;\r\n\r\n`;\r\n        const list = this.state.arr.map((size, i) => {\r\n            return (\r\n                <Bars height={`${size}px`} width={`${50 / this.state.arr.length}%`} active={this.state.currentIndex === i} swap={this.state.swapIndex === i} comparing={this.state.comparingIndex === i} sorted={i<this.state.sorted} key={i}>\r\n                    <p>{size}</p>\r\n                </Bars>\r\n            );\r\n        }); \r\n        return (\r\n            <div className=\"container\">\r\n             \r\n                <div>\r\n                    <Button onClick={() => this.selectionSort()}>Selection Sort</Button>\r\n                    <Container className=\"col-md-8 col-sm-12\">\r\n                        {list}\r\n                    </Container>\r\n                </div>\r\n                \r\n               \r\n            </div>\r\n            )\r\n    }\r\n}\r\nexport default InsertionMain;","import React from 'react';\r\nimport { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport BubbleMain from './BubbleMainComponent';\r\nimport SelectionMain from './SelectionMainComponent';\r\nimport Header from './HeaderComponent.js';\r\nimport InsertionMain from './InsertionMainComponent.js';\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Switch>\r\n                    <Route path=\"/bubblesort\">\r\n                        <BubbleMain />\r\n                    </Route>\r\n                    <Route path=\"/selectionsort\">\r\n                        <SelectionMain />\r\n                    </Route>\r\n                    <Route path=\"/insertionsort\">\r\n                        <InsertionMain />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n            )\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BubbleMain from './components/BubbleMainComponent.js';\nimport SelectionMain from './components/SelectionMainComponent.js';\nimport Main from './components/MainComponent';\r\nimport { HashRouter } from 'react-router-dom';\r\nfunction App() {\n    return (\n        <HashRouter>\n            <Main />\n        </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}